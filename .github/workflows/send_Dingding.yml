name: Send DingTalk Notification

on:
  workflow_dispatch:  # 允许手动触发
  schedule:
    - cron: '30 8 * * *'   # 早上8:30
    - cron: '30 14 * * *'  # 下午14:30
    - cron: '0 17 * * *'   # 下午17:00

jobs:
  send-notification:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
          
      - name: Install dependencies
        run: |
          pip install requests
          
      - name: Create Python script
        run: |
          echo "import os" > send_notification.py
          echo "import json" >> send_notification.py
          echo "import requests" >> send_notification.py
          echo "import hmac" >> send_notification.py
          echo "import hashlib" >> send_notification.py
          echo "import base64" >> send_notification.py
          echo "import urllib.parse" >> send_notification.py
          echo "import datetime" >> send_notification.py
          echo "" >> send_notification.py
          echo "def send_to_dingtalk(content):" >> send_notification.py
          echo "    access_token = os.getenv('DINGTALK_ACCESS_TOKEN')" >> send_notification.py
          echo "    secret = os.getenv('DINGTALK_SECRET')" >> send_notification.py
          echo "    timestamp = str(round(datetime.datetime.now().timestamp() * 1000))" >> send_notification.py
          echo "    string_to_sign = f'{timestamp}\\n{secret}'" >> send_notification.py
          echo "    hmac_code = hmac.new(secret.encode(), string_to_sign.encode(), digestmod=hashlib.sha256).digest()" >> send_notification.py
          echo "    sign = urllib.parse.quote_plus(base64.b64encode(hmac_code))" >> send_notification.py
          echo "    webhook = f'https://oapi.dingtalk.com/robot/send?access_token={access_token}&timestamp={timestamp}&sign={sign}'" >> send_notification.py
          echo "    message = {" >> send_notification.py
          echo "        'msgtype': 'markdown'," >> send_notification.py
          echo "        'markdown': {" >> send_notification.py
          echo "            'title': '📢 微信公众号安全漏洞文章每日更新'," >> send_notification.py
          echo "            'text': content" >> send_notification.py
          echo "        }" >> send_notification.py
          echo "    }" >> send_notification.py
          echo "    response = requests.post(webhook, json=message)" >> send_notification.py
          echo "    if response.status_code == 200:" >> send_notification.py
          echo "        result = response.json()" >> send_notification.py
          echo "        if result.get('errcode') == 0:" >> send_notification.py
          echo "            print('钉钉通知发送成功')" >> send_notification.py
          echo "        else:" >> send_notification.py
          echo "            print(f'钉钉通知发送失败: {result}')" >> send_notification.py
          echo "    else:" >> send_notification.py
          echo "        print(f'钉钉通知发送失败: {response.text}')" >> send_notification.py
          echo "" >> send_notification.py
          echo "def get_today_updates():" >> send_notification.py
          echo "    with open('README.md', 'r', encoding='utf-8') as f:" >> send_notification.py
          echo "        content = f.read()" >> send_notification.py
          echo "    today = datetime.datetime.now().strftime('%Y-%m-%d')" >> send_notification.py
          echo "    start_marker = f'### 📅 {today}'" >> send_notification.py
          echo "    end_marker = '### 📅'" >> send_notification.py
          echo "    start_idx = content.find(start_marker)" >> send_notification.py
          echo "    if start_idx == -1:" >> send_notification.py
          echo "        return '## 📢 今日更新提醒\\n\\n> 今日暂无新文章更新'" >> send_notification.py
          echo "    end_idx = content.find(end_marker, start_idx + len(start_marker))" >> send_notification.py
          echo "    today_content = content[start_idx:] if end_idx == -1 else content[start_idx:end_idx]" >> send_notification.py
          echo "    lines = today_content.split('\\n')" >> send_notification.py
          echo "    formatted_content = ['## 📢 今日更新提醒\\n']" >> send_notification.py
          echo "    formatted_content.append('### 📚 新增文章\\n')" >> send_notification.py
          echo "    current_title = ''" >> send_notification.py
          echo "    current_article_num = 0" >> send_notification.py
          echo "    current_original_link = ''" >> send_notification.py
          echo "    current_github_link = ''" >> send_notification.py
          echo "    for line in lines:" >> send_notification.py
          echo "        if line.strip().startswith(('1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.')):" >> send_notification.py
          echo "            if current_title and current_original_link:" >> send_notification.py
          echo "                formatted_content.append(f'{current_article_num}. 📄 {current_title}  \\n   <sub>🔗 [原文链接]({current_original_link}){{:target=\"_blank\"}} ｜ [GitHub备份]({current_github_link}){{:target=\"_blank\"}}</sub>\\n')" >> send_notification.py
          echo "            current_article_num = int(line.split('.')[0])" >> send_notification.py
          echo "            current_title = line.split('📄')[1].strip() if '📄' in line else line.strip()" >> send_notification.py
          echo "            current_original_link = ''" >> send_notification.py
          echo "            current_github_link = ''" >> send_notification.py
          echo "        elif '原文链接' in line:" >> send_notification.py
          echo "            current_original_link = line.split('(')[1].split(')')[0]" >> send_notification.py
          echo "        elif 'GitHub备份' in line:" >> send_notification.py
          echo "            current_github_link = line.split('(')[1].split(')')[0]" >> send_notification.py
          echo "        elif line.startswith('<sub>📝 新增文章数') or line.startswith('<sub>⏰ 更新时间') or line.startswith('---'):" >> send_notification.py
          echo "            formatted_content.append(line + '\\n')" >> send_notification.py
          echo "    if current_title and current_original_link:" >> send_notification.py
          echo "        formatted_content.append(f'{current_article_num}. 📄 {current_title}  \\n   <sub>🔗 [原文链接]({current_original_link}){{:target=\"_blank\"}} ｜ [GitHub备份]({current_github_link}){{:target=\"_blank\"}}</sub>\\n')" >> send_notification.py
          echo "    formatted_content.append('\\n<sub>💡 [GitHub仓库](https://github.com/zxarj/wxvl){{:target=\"_blank\"}}</sub>')" >> send_notification.py
          echo "    return '\\n'.join(formatted_content)" >> send_notification.py
          echo "" >> send_notification.py
          echo "if __name__ == '__main__':" >> send_notification.py
          echo "    send_to_dingtalk(get_today_updates())" >> send_notification.py
          
      - name: Send DingTalk Notification
        env:
          DINGTALK_ACCESS_TOKEN: ${{ secrets.DINGTALK_ACCESS_TOKEN }}
          DINGTALK_SECRET: ${{ secrets.DINGTALK_SECRET }}
        run: |
          python send_notification.py 

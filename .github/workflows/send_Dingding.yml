name: Send DingTalk Notification

on:
  workflow_dispatch:  # 允许手动触发
  workflow_run:
    workflows: ["update today"]
    types:
      - completed
    branches:
      - main

jobs:
  send-notification:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
          
      - name: Install dependencies
        run: |
          pip install requests pytz
          
      - name: Create Python script
        run: |
          echo "import os" > send_notification.py
          echo "import json" >> send_notification.py
          echo "import requests" >> send_notification.py
          echo "import hmac" >> send_notification.py
          echo "import hashlib" >> send_notification.py
          echo "import base64" >> send_notification.py
          echo "import urllib.parse" >> send_notification.py
          echo "import datetime" >> send_notification.py
          echo "import re" >> send_notification.py
          echo "import pytz" >> send_notification.py
          echo "" >> send_notification.py
          echo "def get_beijing_time():" >> send_notification.py
          echo "    beijing_tz = pytz.timezone('Asia/Shanghai')" >> send_notification.py
          echo "    return datetime.datetime.now(beijing_tz)" >> send_notification.py
          echo "" >> send_notification.py
          echo "def send_to_dingtalk(content):" >> send_notification.py
          echo "    access_token = os.getenv('DINGTALK_ACCESS_TOKEN')" >> send_notification.py
          echo "    secret = os.getenv('DINGTALK_SECRET')" >> send_notification.py
          echo "    timestamp = str(round(datetime.datetime.now().timestamp() * 1000))" >> send_notification.py
          echo "    string_to_sign = f'{timestamp}\\n{secret}'" >> send_notification.py
          echo "    hmac_code = hmac.new(secret.encode(), string_to_sign.encode(), digestmod=hashlib.sha256).digest()" >> send_notification.py
          echo "    sign = urllib.parse.quote_plus(base64.b64encode(hmac_code))" >> send_notification.py
          echo "    webhook = f'https://oapi.dingtalk.com/robot/send?access_token={access_token}&timestamp={timestamp}&sign={sign}'" >> send_notification.py
          echo "    message = {" >> send_notification.py
          echo "        'msgtype': 'markdown'," >> send_notification.py
          echo "        'markdown': {" >> send_notification.py
          echo "            'title': '📢 微信公众号安全漏洞文章每日更新'," >> send_notification.py
          echo "            'text': content" >> send_notification.py
          echo "        }" >> send_notification.py
          echo "    }" >> send_notification.py
          echo "    response = requests.post(webhook, json=message)" >> send_notification.py
          echo "    if response.status_code == 200:" >> send_notification.py
          echo "        result = response.json()" >> send_notification.py
          echo "        if result.get('errcode') == 0:" >> send_notification.py
          echo "            print('钉钉通知发送成功')" >> send_notification.py
          echo "        else:" >> send_notification.py
          echo "            print(f'钉钉通知发送失败: {result}')" >> send_notification.py
          echo "    else:" >> send_notification.py
          echo "        print(f'钉钉通知发送失败: {response.text}')" >> send_notification.py
          echo "" >> send_notification.py
          echo "def get_today_updates():" >> send_notification.py
          echo "    with open('README.md', 'r', encoding='utf-8') as f:" >> send_notification.py
          echo "        content = f.read()" >> send_notification.py
          echo "    today = get_beijing_time().strftime('%m-%d')" >> send_notification.py
          echo "    print(f'当前日期: {today}')" >> send_notification.py
          echo "    start_marker = f'## 📢 {today}日新增文章'" >> send_notification.py
          echo "    print(f'查找标记: {start_marker}')" >> send_notification.py
          echo "    end_marker = '## 📊 统计信息'" >> send_notification.py
          echo "    # 找到所有当天的区块" >> send_notification.py
          echo "    blocks = []" >> send_notification.py
          echo "    start_idx = 0" >> send_notification.py
          echo "    while True:" >> send_notification.py
          echo "        start_idx = content.find(start_marker, start_idx)" >> send_notification.py
          echo "        print(f'找到区块位置: {start_idx}')" >> send_notification.py
          echo "        if start_idx == -1:" >> send_notification.py
          echo "            # 尝试不带'日'的格式" >> send_notification.py
          echo "            alt_marker = f'## 📢 {today}新增文章'" >> send_notification.py
          echo "            print(f'尝试备用标记: {alt_marker}')" >> send_notification.py
          echo "            start_idx = content.find(alt_marker, start_idx)" >> send_notification.py
          echo "            if start_idx == -1:" >> send_notification.py
          echo "                break" >> send_notification.py
          echo "        end_idx = content.find(end_marker, start_idx)" >> send_notification.py
          echo "        if end_idx == -1:" >> send_notification.py
          echo "            end_idx = len(content)" >> send_notification.py
          echo "        block = content[start_idx:end_idx].strip()" >> send_notification.py
          echo "        print(f'找到区块内容:\\n{block}')" >> send_notification.py
          echo "        blocks.append(block)" >> send_notification.py
          echo "        start_idx = end_idx" >> send_notification.py
          echo "    if not blocks:" >> send_notification.py
          echo "        print('没有找到任何区块')" >> send_notification.py
          echo "        return f'## 📢 {today}日新增文章\\n\\n> 今日暂无新文章更新'" >> send_notification.py
          echo "    # 合并所有区块，并去重" >> send_notification.py
          echo "    today_content = '\\n\\n'.join(set(blocks))" >> send_notification.py
          echo "    print(f'合并后的内容:\\n{today_content}')" >> send_notification.py
          echo "    return today_content" >> send_notification.py
          echo "" >> send_notification.py
          echo "if __name__ == '__main__':" >> send_notification.py
          echo "    current_time = get_beijing_time().strftime('%H:%M')" >> send_notification.py
          echo "    content = get_today_updates()" >> send_notification.py
          echo "    if '今日暂无新文章更新' not in content:" >> send_notification.py
          echo "        send_to_dingtalk(content)" >> send_notification.py
          echo "    else:" >> send_notification.py
          echo "        print('没有新文章，跳过推送')" >> send_notification.py
          
      - name: Send DingTalk Notification
        env:
          DINGTALK_ACCESS_TOKEN: ${{ secrets.DINGTALK_ACCESS_TOKEN }}
          DINGTALK_SECRET: ${{ secrets.DINGTALK_SECRET }}
        run: |
          python send_notification.py 
